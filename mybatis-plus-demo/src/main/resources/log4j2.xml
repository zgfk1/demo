<?xml version="1.0" encoding="UTF-8"?>
<!-- 根节点Configuration有两个属性:status和monitorinterval,有两个子节点:Appenders和Loggers(表明可以定义多个Appender和Logger).
    status用来指定log4j本身的打印日志的级别.
    monitorinterval用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s.-->


<configuration status="OFF" monitorinterval="30">

    <!--Appenders节点，常见的有三种子节点:Console、RollingFile、File. -->
    <appenders>

        <!--Console节点用来定义输出到控制台的Appender.
        name:指定Appender的名字.
        target:SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT.
        PatternLayout:输出格式，不设置默认为:%m%n.
        -->
        <Console name="Console" target="SYSTEM_OUT">
            <!--只接受程序中DEBUG级别的日志进行处理-->
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{HH:mm:ss.SSS}] %-5level %class{36} %L %M - %msg%xEx%n"/>
        </Console>

        <RollingFile name="RollingFileDebug" fileName="./mybatis-demo-logs/debug.log"
                     filePattern="logs/[${project.name}]/$${date:yyyy-MM}/debug-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <ThresholdFilter level="DEBUG"/>
                <ThresholdFilter level="INFO" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout
                    pattern="[%d{yyyy-MM-dd HH:mm:ss}] %-5level %class{36} %L %M - %msg%xEx%n"/>
            <Policies>
                <SizeBasedTriggeringPolicy size="500 MB"/>
                <TimeBasedTriggeringPolicy/>
            </Policies>
        </RollingFile>

        <!--处理INFO级别的日志，并把该日志放到logs/[${project.name}]/info.log文件中-->
        <RollingFile name="RollingFileInfo" fileName="./mybatis-demo-logs/[${project.name}]/info.log"
                     filePattern="logs/[${project.name}]/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <!--只接受INFO级别的日志，其余的全部拒绝处理-->
                <ThresholdFilter level="INFO"/>
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout
                    pattern="[%d{yyyy-MM-dd HH:mm:ss}] %-5level %class{36} %L %M - %msg%xEx%n"/>
            <Policies>
                <SizeBasedTriggeringPolicy size="500 MB"/>
                <TimeBasedTriggeringPolicy/>
            </Policies>
        </RollingFile>

        <!--处理WARN级别的日志，并把该日志放到logs/[${project.name}]/warn.log文件中-->
        <RollingFile name="RollingFileWarn" fileName="./mybatis-demo-logs/[${project.name}]/warn.log"
                     filePattern="logs/[${project.name}]/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <ThresholdFilter level="WARN"/>
                <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout
                    pattern="[%d{yyyy-MM-dd HH:mm:ss}] %-5level %class{36} %L %M - %msg%xEx%n"/>
            <Policies>
                <SizeBasedTriggeringPolicy size="500 MB"/>
                <TimeBasedTriggeringPolicy/>
            </Policies>
        </RollingFile>

        <!--处理error级别的日志，并把该日志放到logs/[${project.name}]/error.log文件中-->
        <RollingFile name="RollingFileError" fileName="./mybatis-demo-logs/[${project.name}]/error.log"
                     filePattern="logs/[${project.name}]/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log.gz">
            <ThresholdFilter level="ERROR"/>
            <PatternLayout
                    pattern="[%d{yyyy-MM-dd HH:mm:ss}] %-5level %class{36} %L %M - %msg%xEx%n"/>
            <Policies>
                <SizeBasedTriggeringPolicy size="500 MB"/>
                <TimeBasedTriggeringPolicy/>
            </Policies>
        </RollingFile>

        <!--druid的日志记录追加器-->
        <RollingFile name="druidSqlRollingFile" fileName="./mybatis-demo-logs/[${project.name}]/druid-sql.log"
                     filePattern="logs/[${project.name}]/$${date:yyyy-MM}/api-%d{yyyy-MM-dd}-%i.log.gz">
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss}] %-5level %L %M - %msg%xEx%n"/>
            <Policies>
                <SizeBasedTriggeringPolicy size="500 MB"/>
                <TimeBasedTriggeringPolicy/>
            </Policies>
        </RollingFile>

        <!--mybatis-demo的日志记录追加器-->
        <RollingFile name="sedinFile" fileName="./mybatis-demo-logs/[${project.name}]/mybatis-demo.log"
                     filePattern="logs/[${project.name}]/$${date:yyyy-MM}/sedinFile-%d{yyyy-MM-dd}-%i.log.gz">
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss}] %-5level %L %M - %msg%xEx%n"/>
            <Policies>
                <SizeBasedTriggeringPolicy size="500 MB"/>
                <TimeBasedTriggeringPolicy/>
            </Policies>
        </RollingFile>
    </appenders>


    <!--Loggers节点，常见的有两种:Root和Logger. -->
    <loggers>
        <!--Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出
            level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
            AppenderRef：Root的子节点，用来指定该日志输出到哪个Appender.-->
        <root level="DEBUG">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
            <appender-ref ref="RollingFileDebug"/>
        </root>
        <!--记录druid-sql的记录-->
        <logger name="druid.sql.Statement" level="debug" additivity="false">
            <appender-ref ref="druidSqlRollingFile"/>
        </logger>

        <!--项目debug日志输出文件         生产环境可以打开方便排查，测试环境注释上可看控制台输出日志-->
        <!--
        <Logger name="com.burst.sedin" level="debug" additivity="false">
                  <AppenderRef ref="sedinFile"/>
         </Logger>
         -->

        <!--log4j2 自带过滤日志-->
        <Logger name="org.apache.catalina.startup.DigesterFactory" level="error"/>
        <Logger name="org.apache.catalina.util.LifecycleBase" level="error"/>
        <Logger name="org.apache.coyote.http11.Http11NioProtocol" level="warn"/>
        <logger name="org.apache.sshd.common.util.SecurityUtils" level="warn"/>
        <Logger name="org.apache.tomcat.util.net.NioSelectorPool" level="warn"/>
        <Logger name="org.crsh.plugin" level="warn"/>
        <logger name="org.crsh.ssh" level="warn"/>
        <Logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="error"/>
        <Logger name="org.hibernate.validator.internal.util.Version" level="warn"/>
        <logger name="org.springframework.boot.actuate.autoconfigure.CrshAutoConfiguration" level="warn"/>
        <logger name="org.springframework.boot.actuate.endpoint.jmx" level="warn"/>
        <logger name="org.thymeleaf" level="warn"/>
        <logger name="org.hibernate.validator" level="error"/>
        <logger name="org.springframework.core.env.PropertySourcesPropertyResolver" level="error"/>
        <logger name="org.springframework.context.annotation" level="error"/>
        <logger name="rg.mybatis.logging" level="error"/>
        <logger name="org.springframework.beans.factory" level="error"/>
        <logger name="org.springframework.boot.autoconfigure.logging" level="error"/>
        <logger name="org.apache.zookeeper" level="error"/>
        <logger name="com.baomidou.mybatisplus.core" level="error"/>
        <logger name="io.netty.util.internal.logging" level="error"/>
        <logger name="org.springframework.core" level="error"/>
        <logger name="org.mybatis.logging" level="error"/>
        <logger name="com.alibaba.dubbo.config.spring.beans.factory" level="error"/>
        <logger name="org.apache.ibatis.logging" level="error"/>
    </loggers>

</configuration>
